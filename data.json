{"intents": [
    {"tag": "greeting",
     "patterns": ["Hi there", "How are you", "Is anyone there?","Hey","Hola", "Hello", "Good day"],
     "responses": ["Hello, thanks for asking", "Good to see you again", "Hi there, how can I help?"],
     "context": [""]
    },
    {"tag": "goodbye",
     "patterns": ["Bye", "See you later", "Goodbye", "Nice chatting to you, bye", "Till next time"],
     "responses": ["See you!", "Have a nice day", "Bye! Come back again soon."],
     "context": [""]
    },
    {"tag": "thanks",
     "patterns": ["Thanks", "Thank you", "That's helpful", "Awesome, thanks", "Thanks for helping me"],
     "responses": ["Happy to help!", "Any time!", "My pleasure"],
     "context": [""]
    },
    {"tag": "noanswer",
     "patterns": [],
     "responses": ["Sorry, can't understand you", "Please give me more info", "Not sure I understand"],
     "context": [""]
    },
    {"tag": "options",
     "patterns": ["How you could help me?", "What you can do?", "What help you provide?", "How you can be helpful?", "What support is offered"],
     "responses": ["I can guide you through Data Structures and Algorithms, Trees, Cryptography and inshort every topic related to Discrete Maths."],
     "context": [""]
    },
    {"tag": "intro_trees",
     "patterns": ["What are trees?", "What is tree?", "tree" ],
     "responses": ["A tree is an abstract hierarchical data structure. It is represented by a group of linked nodes, with a single root node. Each node can have zero or multiple children. A leaf is a node with no children."],
     "context": [""]
    },
    {"tag": "binary_trees",
     "patterns": ["What are binary trees?", "What is binary tree?", "Binary tree" ],
     "responses": ["When talking about trees, we often mean binary trees. Binary trees are a type of tree where each node has at maximum two child nodes - a left child and a right child.","Binary trees are a type of tree where each node has at maximum two child nodes - a left child and a right child."],
     "context": [""]
    },
    {"tag": "binary_search_tree",
     "patterns": ["What is binary search tree? ", "Binary search tree", "BST", "bst" ],
     "responses": ["A particular type of binary tree is a binary search tree, or BST. In a BST, the nodes are ordered by their keys, making it efficient for search and inserting data. The key of any node is >= the value of its left child key, and <= the value of its right child key."],
     "context": [""]
    },
    {"tag": "tree_traversal",
     "patterns": ["How can we traverse a tree? "," traverse tree","tree traversel"],
     "responses": ["Tree traversal is a common operation that visits every node in the tree in order to, for example, list the tree's contents, or for serialization. There are two main traversal strategies: depth-first, and breadth-first. Depth-first traversal visits nodes in order from root down to leaf recursively. Breadth-first traversal visits nodes of the same level before going to nodes of the next depth level."],
     "context": [""]
    },
    {"tag": "depth_first",
     "patterns": ["depth first traversel", "depth-first" ],
     "responses": ["Depth-first traversal visits nodes in order from root down to leaf recursively.Depth-first traversal has three sub-types: in-order, pre-order and post-order traversal. These refer to the order in which a node and its child nodes are visited."],
     "context": [""]
    },
    {"tag": "Breadth_first ",
     "patterns": ["Breadth-first ","breadth first traversel"],
     "responses": ["Breadth-first traversal visits nodes of the same level before going to nodes of the next depth level."],
     "context": [""]
    },
    {"tag": "depth_first_types",
     "patterns": ["what are types of depth-first traversal? ", "In-order depth first traversel", "In-order", "Pre-order depth traversel", "Pre-order", "post-order traversel","post-order" ],
     "responses": ["In-order traversal visits the node's left subtree, then the parent node, then the right subtree. This happens recursively. In this method, a BST's keys will be visited in ascending order.Pre-order traversal visits the current node first, then the left subtree, then the right subtree. This happens recursively.Post-order traversal visits the left subtree, then the right subtree, and finally the parent node. This happens recursively."],
     "context": [""]
    },
    {"tag": "degenerate_tree",
     "patterns": ["degenerate tree","What is degenerate tree? ","types of trees?","single node tree called?"],
     "responses": ["Binary trees can take on various shapes depending on how the nodes are distributed. A tree with only one child per node is called a degenerate tree, as it has degenerated into a linked list. "],
     "context": [""]
    },
    {"tag": "height_balanced_tree",
     "patterns": ["What is height balanced tree?","what is the height of a node?","height of node"],
     "responses": [" A height-balanced tree is one where the left and right subtrees of every node have a height difference of not more than one. The height of a node is the length of the longest path from the node to a leaf."],
     "context": [""]
    }
]
}